{"version":3,"sources":["components/Chart.js","components/Chart2.js","components/Chart3.js","components/Chart4.js","components/Chart5.js","Charts.js","App.js","index.js"],"names":["values","useState","chartData","setChartData","sessionValues","setSessionValues","useEffect","arr","Uint32Array","map","_","i","Math","random","randomSession","labels","datasets","type","label","data","backgroundColor","borderColor","borderWidth","width","height","options","maintainAspectRatio","title","display","text","fontSize","scales","yAxes","stacked","setValues","randomLine","className","onClick","Chart","Chart2","Chart3","Chart4","Chart5","Charts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd39b38b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nexport default ({ values }) => {\n    const [chartData, setChartData] = useState({});\n    const [sessionValues, setSessionValues] = useState([]);\n\n\n\n    const randomSession = () => {\n        let arr = new Uint32Array(6);\n        arr.map((_, i) => arr[i] = Math.random(10) * 32 );\n        setSessionValues(arr);\n    }\n\n\n\n    useEffect(() => {\n        randomSession();\n        setChartData({\n            labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],\n            datasets: [\n                {\n                    type: 'bar',\n                    label: 'USUÁRIOS',\n                    data: values,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n                {\n                    type: 'bar',\n                    label: 'SESSÃO',\n                    data: sessionValues,\n                    backgroundColor: [\n                        'rgba(75, 192, 192, 0.4)',\n                        'rgba(75, 192, 192, 0.4)',\n                        'rgba(75, 192, 192, 0.4)',\n                        'rgba(75, 192, 192, 0.4)',\n                        'rgba(75, 192, 192, 0.4)',\n                        'rgba(75, 192, 192, 0.4)',\n                    ],\n                    borderColor: [\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(75, 192, 192, 1)',\n                    ],\n                    borderWidth: 1,\n                }\n            ],\n        })\n    }, [values]);\n\n\n\n    return (\n        <Bar\n            data={chartData}\n            width={600}\n            height={300}\n            options={{\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Bar',\n                    fontSize: 25\n                }\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nexport default ({ values }) => {\n    const [chartData, setChartData] = useState({});\n    const [sessionValues, setSessionValues] = useState([]);\n\n\n\n    const randomSession = () => {\n        let arr = new Uint32Array(6);\n        arr.map((_, i) => {\n            arr[i] = Math.random(10) * 32;\n        })\n        setSessionValues(arr);\n    }\n\n\n\n    useEffect(() => {\n        randomSession();\n        setChartData({\n            labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],\n            datasets: [\n                {\n                    type: 'line',\n                    label: 'USUÁRIOS',\n                    data: values,\n                    backgroundColor: [\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(153, 102, 255, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n                {\n                    type: 'bar',\n                    label: 'SESSÃO',\n                    data: sessionValues,\n                    backgroundColor: [\n                        'rgba(255, 206, 1, 0.3)',\n                        'rgba(255, 206, 1, 0.3)',\n                        'rgba(255, 206, 1, 0.3)',\n                        'rgba(255, 206, 1, 0.3)',\n                        'rgba(255, 206, 1, 0.3)',\n                        'rgba(255, 206, 1, 0.3)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 206, 1, 1)',\n                        'rgba(255, 206, 1, 1)',\n                        'rgba(255, 206, 1, 1)',\n                        'rgba(255, 206, 1, 1)',\n                        'rgba(255, 206, 1, 1)',\n                        'rgba(255, 206, 1, 1)',\n                    ],\n                    borderWidth: 1,\n                }\n            ],\n        })\n    }, [values]);\n\n\n\n    return (\n        <Line\n            data={chartData}\n            width={600}\n            height={300}\n            options={{\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Bar with Line',\n                    fontSize: 25\n                },\n                scales: {\n                    yAxes: [{\n                        stacked: false\n                    }]\n                }\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Pie } from 'react-chartjs-2';\n\nexport default ({ values }) => {\n    const [chartData, setChartData] = useState({});\n\n\n\n    useEffect(() => {\n        setChartData({\n            labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],\n            datasets: [\n                {\n                    label: 'USUÁRIOS',\n                    data: values,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n            ],\n        })\n    }, [values]);\n\n\n\n    return (\n        <Pie\n            data={chartData}\n            width={600}\n            height={400}\n            options={{\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Pie',\n                    fontSize: 25\n                },\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Radar } from 'react-chartjs-2';\n\nexport default ({ values }) => {\n    const [chartData, setChartData] = useState({});\n    const [sessionValues, setSessionValues] = useState([]);\n\n\n        \n    const randomSession = () => {\n        let arr = new Uint32Array(6);\n        arr.map((_, i) => {\n            arr[i] = Math.random(10) * 32;\n        })\n        setSessionValues(arr);\n    }\n\n\n\n    useEffect(() => {\n        randomSession();\n        setChartData({\n            labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],\n            datasets: [\n                {\n                    label: 'USUÁRIOS',\n                    data: values,\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(54, 162, 235, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n                {\n                    label: 'SESSÃO',\n                    data: sessionValues,\n                    backgroundColor: [\n                        'rgba(255, 90, 132, 0.6)',\n                        'rgba(255, 90, 132, 0.6)',\n                        'rgba(255, 90, 132, 0.6)',\n                        'rgba(255, 90, 132, 0.6)',\n                        'rgba(255, 90, 132, 0.6)',\n                        'rgba(255, 90, 132, 0.6)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1,\n                }\n            ],\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [values]);\n\n\n\n    return (\n        <Radar\n            data={chartData}\n            width={600}\n            height={400}\n            options={{\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Radar',\n                    fontSize: 25\n                }\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nexport default ({ values }) => {\n    const [chartData, setChartData] = useState({});\n\n\n\n    useEffect(() => {\n        setChartData({\n            labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],\n            datasets: [\n                {\n                    label: 'USUÁRIOS',\n                    data: values,\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(255, 159, 64, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n            ],\n        })\n    }, [values]);\n\n\n\n    return (\n        <Doughnut\n            data={chartData}\n            width={600}\n            height={400}\n            options={{\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Doughnut',\n                    fontSize: 25\n                }\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Chart1 from './components/Chart';\nimport Chart2 from './components/Chart2';\nimport Chart3 from './components/Chart3';\nimport Chart4 from './components/Chart4';\nimport Chart5 from './components/Chart5';\n\nimport './App.css';\n\nexport default () => {\n  const [values, setValues] = useState(0);\n\n\n\n  useEffect(() => {\n    randomLine();\n  }, []);\n\n\n\n  const randomLine = () => {\n    let arr = new Uint32Array(6);\n    arr.map((_, i) => {\n      arr[i] = Math.random(10) * 32;\n    })\n    setValues(arr);\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"row text-center mt-5\">\n        <div className=\"col-12\">\n          <button className=\"btn btn-info text-bold\" onClick={randomLine}>Gerar novos valores</button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-6 py-3\">\n          <Chart1 values={values} />\n        </div>\n        <div className=\"col-md-6 py-3\">\n          <Chart2 values={values} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-4 py-3\">\n          <Chart3 values={values} />\n        </div>\n        <div className=\"col-md-4 py-3\">\n          <Chart4 values={values} />\n        </div>\n        <div className=\"col-md-4 py-3\">\n          <Chart5 values={values} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react';\n\nimport './App.css';\nimport Charts from './Charts'\n\nexport default () => <Charts />\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}